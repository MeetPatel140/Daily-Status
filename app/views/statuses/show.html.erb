<!-- Page Wrapper -->
<div id="wrapper">

  <!-- Sidebar -->
  <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

      <!-- Sidebar - Brand -->
      <a class="sidebar-brand d-flex align-items-center justify-content-center" href="#">
          <div class="sidebar-brand-icon">
              <i class="fas fa-laptop-code"></i>
          </div>
          <div class="sidebar-brand-text mx-3">Daily Status<sup></sup></div>
      </a>

      <!-- Divider -->
      <hr class="sidebar-divider my-3">

      <!-- Nav Item -->
      <li class="nav-item">
        <%= link_to root_path, class: "nav-link" do %>
            <i class="fas fa-fw fa-tachometer-alt"></i>
            <span>Dashboard</span>
        <% end %>
    </li>

      <!-- Divider -->
      <hr class="sidebar-divider my-3">

      <!-- Nav Item -->
      <li class="nav-item active">
          <%= link_to statuses_path, class: "nav-link" do %>
              <i class="fa-solid fa-fw fa-list-check"></i>
              <span>Statuses</span>
          <% end %>
      </li>

      <!-- Divider -->
      <hr class="sidebar-divider my-3">

      <!-- Nav Item - Logout -->
        <li class="nav-item">
            <%= link_to destroy_user_session_path, data: { turbo_method: :delete }, class: "nav-link" do %>
                <i class="fas fa-sign-out-alt fa-fw"></i>
                <span>Logout</span>
            <% end %>
        </li>


      <!-- Divider -->
      <hr class="sidebar-divider my-3 d-none d-md-block">

      <!-- Sidebar Toggler (Sidebar) -->
      <div class="text-center d-none d-md-inline">
          <button class="rounded-circle border-0" id="sidebarToggle"></button>
      </div>
  </ul>
  <!-- End of Sidebar -->

  <!-- Content Wrapper -->
  <div id="content-wrapper" class="d-flex flex-column">

      <!-- Main Content -->
      <div id="content">

          <!-- Topbar -->
            <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

                <!-- Sidebar Toggle (Topbar) -->
                <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                    <i class="fa fa-bars"></i>
                </button>

                <h5>Daily Status</h5>

                <!-- Container for Current Date & Time -->
                <div id="currentDateTime" class="ml-auto mr-3"></div>

                <!-- Check-in Duration -->
                <% unless current_user.admin? %>
                    <!-- Recording Tab -->
                    <div id="recordingTab" class="recordingTab align-items-center justify-content-between">
                        <div id="recordingDot" class="dot"></div>
                        <div id="checkinDuration" class="text-600"></div>
                    </div>
                <% end %>

                <!-- Topbar Navbar -->
                <ul class="navbar-nav ml-auto">

                    <% if current_user.admin? %>
                        <div class="mt-4 text-primary font-weight-bold text-uppercase mb-1">
                            <i class="fa-solid fa-crown mr-1"></i>Admin
                        </div>
                    <% else %>
                    <div class="mt-3">
                        <% if TimeRecord.has_checked_in_today?(current_user) %>
                            <button class="btn btn-outline-success ml-2" disabled>
                            <i class="fas fa-check mr-1"></i>
                            Checked In
                            </button>
                        <% else %>
                            <%= link_to check_in_path, data: { turbo_method: :post, confirm: 'Are you sure you want to check in?' }, class: "btn btn-primary ml-2", id: "checkinButton" do %>
                            <i class="fas fa-sign-in-alt mr-1"></i>
                            Check In
                            <% end %>
                        <% end %>

                        <% if TimeRecord.has_checked_out_today?(current_user) %>
                            <button class="btn btn-outline-success ml-2" disabled>
                            <i class="fas fa-check mr-1"></i>
                            Checked Out
                            </button>
                        <% else %>
                            <%= link_to check_out_path, data: { turbo_method: :post, confirm: 'Are you sure you want to check out?' }, class: "btn btn-primary ml-2", id: "checkoutButton", disabled: true do %>
                            <i class="fas fa-sign-out-alt mr-1"></i>
                            Check Out
                            <% end %>
                        <% end %>
                        </div>
  
                    <% end %>

                    <!-- Nav Item - User Information -->
                    <li class="nav-item dropdown no-arrow">
                        <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="mr-2 d-none d-lg-inline text-gray-600 small"><%= current_user.name %></span>
                            <img class="img-profile rounded-circle" src="https://raw.githubusercontent.com/MeetPatel140/cdn/main/undraw_profile.svg">
                        </a>
                        <!-- Dropdown - User Information -->
                        <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="userDropdown">
                            <a class="dropdown-item" href="#">
                                <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                                Profile
                            </a>
                            <a class="dropdown-item" href="#">
                                <i class="fas fa-cogs fa-sm fa-fw mr-2 text-gray-400"></i>
                                Settings
                            </a>
                            <div class="dropdown-divider"></div>
                            <%= link_to destroy_user_session_path, data: { turbo_method: :delete }, class: "dropdown-item" do %>
                            <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                            Logout
                            <% end %>
                        </div>

                    </li>
                </ul>
            </nav>
            <!-- End of Topbar -->

          <!-- Begin Page Content -->
          <div class="container-fluid">

             <!-- Page Heading -->
            <div class="d-sm-flex align-items-center justify-content-between mb-4">
                <h1 class="h3 mb-0 text-gray-800">
                  <% if current_user.admin? %>
                    <%= link_to statuses_path, class: "text-dark" do %>
                      <i class="fas fa-user mr-1"></i> Employee's Statuses
                    <% end %>
                    <% else %>
                    <%= link_to statuses_path, class: "text-dark" do %>
                      <i class="fas fa-user mr-1"></i> Your Statuses
                    <% end %>
                    <% end %>
                  <% if @status.daily_report.present? %>
                      > <%= @status.daily_report %>
                  <% end %>
                </h1>
              </div>
              
              <div class="card">
                <div class="card-body">
                  <div class="row">
                    <div class="col-md-6">
                      <h4>Date: <%= @status.date.strftime('%d-%m-%Y') %></h4>
                      <h4>Github PR Link: <%= link_to "Open PR Link" , @status.github_pr_link, target: "_blank" %></h4>
                    </div>
                    <div class="col-md-6">
                      <h4>
                        <span class="mr-2">Status: 
                          <% if @status.status.downcase == 'pending' %>
                            <span class="text-info"><b>Pending</b></span>
                          <% elsif @status.status.downcase == 'issue' %>
                            <span class="text-danger"><b>Issue</b></span>
                          <% elsif @status.status.downcase == 'resolved' %>
                            <span class="text-warning"><b>Resolved</b></span>
                          <% elsif @status.status.downcase == 'completed' %>
                            <span class="text-success"><b>Completed</b></span>
                          <% else %>
                            <%= @status.status %>
                          <% end %>
                        </span>
                    
                        <% if !current_user.admin? && @status.status == "issue" %>
                          <%= button_to mark_resolved_status_path(@status), method: :get, data: { turbo_confirm: 'Are you sure you want to Mark this Status as Resolved?' }, class: 'btn btn-success float-right mb-3', style: 'margin-left: auto;', remote: true do %>
                            <i class="fas fa-check"></i> Mark as Resolved
                          <% end %>
                        <% end %>
                      </h4>
                    
                      <h4>Remarks:
                        <% if @status.remarks.present? %>
                          <%= @status.remarks %>
                        <% else %>
                          <span class="text-info"><b>No Remarks</b></span>
                        <% end %>

                        <% if current_user.admin? %>
                          <% if @status.status = "pending" || @status.status = "resolved" %>
                            <%= link_to edit_status_path(@status), class: "btn btn-success float-right mb-3", title: "New Status" do %>
                                <i class="fas fa-plus"></i> Add Remark
                            <% end %>
                          <% end %>
                        <% end %>

                      </h4>
                    </div>
                    
                  </div>
                </div>
              </div>
  
              <!-- Table -->
                <div class="card shadow mb-4 mt-3">
                    <div class="card-header py-3">
                        <h6 class="m-0 font-weight-bold text-primary">Tasks</h6>
                    </div>
                    
                    <div class="card-body">
                      <% if !current_user.admin? %>
                        <!-- New Status Link (Right Side) -->
                        <%= link_to new_task_path(status_id: @status.id), class: "btn btn-info float-right mb-3", title: "New Status" do %>
                          <i class="fas fa-plus"></i> New Task
                        <% end %>
                      <% end %>
                        <div class="table-responsive">
                            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th style="width: 5%;">Title</th>
                                        <th style="width: 15%;">Description</th>
                                        <th style="width: 8%;">Start Time</th>
                                        <th style="width: 10%;">End Time</th>
                                        <th style="width: 5%;">Screenshot</th>
                                        <th style="width: 5%;">Action</th>
                                    </tr>
                                </thead>
                                <tfoot>
                                    <tr>
                                      <th style="width: 5%;">Title</th>
                                        <th style="width: 15%;">Description</th>
                                        <th style="width: 8%;">Start Time</th>
                                        <th style="width: 10%;">End Time</th>
                                        <th style="width: 5%;">Screenshot</th>
                                        <th style="width: 5%;">Action</th>
                                    </tr>
                                </tfoot>
                                <tbody>
                                  <% @status.tasks.each do |task| %>
                                  <tr>
                                            <td><%= link_to task.title, edit_task_path(task) %></td>
                                            <td><%= task.description %></td>
                                            <td><%= task.start_time.strftime('%I:%M %p') %></td>
                                            <td><%= task.end_time.strftime('%I:%M %p') %></td>
                                            <td>
                                              <% if task.screenshot.attached? %>
                                                <%= link_to '#', data: { toggle: 'modal', target: '#screenshotModal' } do %>
                                                  <%= image_tag task.screenshot, style: 'max-width: 100px; max-height: 100px;' %>
                                                <% end %>
                                              <% else %>
                                                <p>No screenshot available</p>
                                              <% end %>
                                            </td>
                                            
                                            <!-- Add this modal code at the end of your view or layout -->
                                            <div class="modal fade" id="screenshotModal" tabindex="-1" role="dialog" aria-labelledby="screenshotModalLabel" aria-hidden="true">
                                              <div class="modal-dialog modal-lg">
                                                <div class="modal-content">
                                                  <div class="modal-header">
                                                    <h5 class="modal-title" id="screenshotModalLabel">Screenshot</h5>
                                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                      <span aria-hidden="true">&times;</span>
                                                    </button>
                                                  </div>
                                                  <div class="modal-body">
                                                    <% if task.screenshot.attached? %>
                                                      <%= image_tag task.screenshot, style: 'width: 100%; height: auto;' %>
                                                    <% else %>
                                                      <p>No screenshot available</p>
                                                    <% end %>
                                                  </div>
                                                </div>
                                              </div>
                                            </div>
                                            
                                              <td>
                                                <div class="btn-group" role="group" aria-label="Task Actions">
                                                  <% if !current_user.admin? %>
                                                    <%= link_to edit_task_path(task.id), class: "btn btn-warning btn-sm mr-2", title: "Edit" do %>
                                                      <i class="fas fa-edit"></i> Edit
                                                    <% end %>
                                                  <% end %>
                                                  <%= link_to task_path(task), data: { turbo_method: :delete, turbo_confirm: 'Are you sure you want to Delete this Task ?' }, class: "btn btn-danger btn-sm", title: "Delete" do %>
                                                    <i class="fas fa-trash"></i> Delete
                                                  <% end %>
                                                </div>
                                              </td>                     
                                        </tr>
                                        <% end %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                  </div>
          </div>
          <!-- /.container-fluid -->

      </div>
      <!-- End of Main Content -->

      <!-- Footer -->
      <footer class="sticky-footer bg-white">
          <div class="container my-auto">
              <div class="copyright text-center my-auto">
                  <span>Copyright &copy; Daily Status <a href="https://www.linkedin.com/in/meet-solanki-065074210/">Meet Solanki</a></span>
              </div>
          </div>
      </footer>
      <!-- End of Footer -->
  </div>
  <!-- End of Content Wrapper -->
</div>

<script>
    $(document).ready(function () {
        $("#sidebarToggle").on("click", function () {
            $("#accordionSidebar").toggleClass("toggled");
            $('#dataTable').DataTable();
        });

        // Function to get the date range for the current week (Monday to Sunday)
        function getWeekDates() {
            const today = new Date();
            const firstDayOfWeek = new Date(today);
            const diff = today.getDate() - today.getDay() + (today.getDay() === 0 ? -6 : 1); // Adjust for Monday as the first day
            firstDayOfWeek.setDate(diff);
            const lastDayOfWeek = new Date(firstDayOfWeek);
            lastDayOfWeek.setDate(lastDayOfWeek.getDate() + 6);
            return `${firstDayOfWeek.toLocaleDateString()} - ${lastDayOfWeek.toLocaleDateString()}`;
        }

        // Populate the "week-dates" element with the date range for the current week
        document.getElementById('week-dates').textContent = getWeekDates();

        // Function to fetch and display weekly durations
        function fetchWeeklyDurations() {
            // Fetch weekly durations for the current user from the server
            fetch('/weekly_durations')
                .then(response => response.json())
                .then(data => {
                    const durations = data.durations;

                    // Extract dates and durations from the response
                    const dates = durations.map(entry => entry.date);
                    const durationValues = durations.map(entry => entry.duration);

                    // Define colors based on value range
                    const colorScale = durationValues.map(value => {
                        if (value <= 6)
                        {
                            return 'red';
                        }
                        else if (value >= 7 && value <= 8)
                        {
                            return 'blue';
                        }
                        else if (value > 8)
                        {
                            return 'green';
                        }
                    });

                    // Display weekly durations using Chart.js
                    const ctx = document.getElementById('weeklyChart').getContext('2d');
                    const weeklyChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: dates,
                            datasets: [{
                                label: 'Duration (h:m:s)',
                                data: durationValues,
                                backgroundColor: colorScale,
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function (value, index, values) {
                                            // Converting duration values to h:m:s format
                                            const hours = Math.floor(value);
                                            const minutes = Math.floor((value % 1) * 60);
                                            const seconds = Math.floor(((value % 1) * 60) % 1 * 60);
                                            return hours + ':' + minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
                                        }
                                    }
                                },
                                x: {
                                    // Display day labels horizontally
                                    ticks: {
                                        maxRotation: 0,
                                        minRotation: 0
                                    }
                                }
                            },
                            plugins: {
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const value = context.raw;
                                            const hours = Math.floor(value);
                                            const minutes = Math.floor((value % 1) * 60);
                                            const seconds = Math.floor(((value % 1) * 60) % 1 * 60);
                                            return `Duration: ${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                                        }
                                    }
                                },
                                legend: {
                                    display: false // Hide legend
                                },
                                annotation: {
                                    annotations: durationValues.map((value, index) => ({
                                        type: 'line',
                                        mode: 'vertical',
                                        scaleID: 'x',
                                        value: index, // x-value is the index of the bar
                                        borderColor: 'black',
                                        borderWidth: 1,
                                        label: {
                                            content: value.toFixed(2), // Format the duration value as needed
                                            enabled: true,
                                            position: 'top'
                                        }
                                    }))
                                }
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching weekly durations:', error);
                });
        }

        // Call the function to fetch and display weekly durations when the page loads
        fetchWeeklyDurations();

        // Function to fetch and display weekly employee count
        async function fetchAndDisplayWeeklyEmployeeCount() {
            // Fetch weekly employee count from the server
            fetch('/weekly_employee_count')
                .then(response => response.json())
                .then(data => {
                    const weeklyCounts = data.weeklyCounts;

                    // Extract dates and counts from the response
                    const dates = weeklyCounts.map(entry => entry.date);
                    const counts = weeklyCounts.map(entry => entry.count);

                    // Display weekly employee count using Chart.js
                    const ctx = document.getElementById('weeklyChart2').getContext('2d');
                    const weeklyChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: dates,
                            datasets: [{
                                label: 'Employees Count',
                                data: counts,
                                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false // Hide legend
                                }
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error('Error fetching weekly employee count:', error);
                });
        }

        // Call the function to fetch and display weekly employee count when the page loads
        fetchAndDisplayWeeklyEmployeeCount();


        // Function to fetch time records for the current user for the specified year and month
        async function fetchTimeRecords(year, month) {
            const response = await fetch(`/time_records?year=${year}&month=${month}`);
            if (!response.ok) {
                throw new Error('Failed to fetch time records');
            }
            const data = await response.json();
            return data.timeRecords;
        }

        // Function to populate the calendar with fetched time records
        async function populateCalendar() {
            // Get the current year and month
            const currentDate = new Date();
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth() + 1;

            // Fetch time records for the current user for the current month
            const timeRecords = await fetchTimeRecords(year, month);

            // Get the calendar body element
            const calendarBody = document.getElementById('calendar-body');

            // Get the month and year element
            const monthYearElement = document.getElementById('month-year');
            monthYearElement.textContent = `${getMonthName(month)} ${year}`;

            // Get the number of days in the current month
            const daysInMonth = new Date(year, month, 0).getDate();

            // Clear existing content
            calendarBody.innerHTML = '';

            // Start building the table rows
            let row;
            for (let day = 1; day <= daysInMonth; day++) {
                if (day === 1 || new Date(year, month - 1, day).getDay() === 1) {
                    // Start a new row at the beginning of the month or on Monday
                    row = document.createElement('tr');
                    calendarBody.appendChild(row);
                }

                // Skip adding marks for Sundays
                if (new Date(year, month - 1, day).getDay() === 0) {
                    const cell = document.createElement('td');
                    cell.textContent = day;
                    cell.classList.add('sunday'); // Add class for Sundays
                    row.appendChild(cell);
                    continue; // Skip adding marks for Sundays
                }

                // Create a table cell for the day
                const cell = document.createElement('td');
                cell.textContent = day;

                // Check if there is a time record for the current day
                const recordExists = timeRecords.some(record => {
                    const checkInDate = new Date(record.check_in_at);
                    return checkInDate.getDate() === day;
                });

                // Check if the date is in the future
                const currentDateObj = new Date(year, month - 1, day);
                const isFutureDate = currentDateObj > currentDate;

                // Add appropriate class based on time record existence and future date
                if (!isFutureDate) {
                    cell.classList.add(recordExists ? 'present' : 'missing');

                    // Add check/cross mark only for past and present dates
                    if (recordExists) {
                        const mark = document.createElement('span');
                        mark.textContent = '✔';
                        mark.classList.add('check-mark');
                        mark.style.color = 'rgba(0, 200, 0, 0.35)';
                        mark.style.fontSize = '30px';
                        mark.style.transform = 'translate(-90%, -20%)';
                        mark.style.fontWeight = 'bold';
                        mark.style.position = 'absolute';
                        cell.appendChild(mark);
                    } else {
                        const mark = document.createElement('span');
                        mark.textContent = '❌';
                        mark.classList.add('cross-mark');
                        mark.style.color = 'rgba(150, 0, 0, 0.3)';  
                        mark.style.fontSize = '22px';
                        mark.style.fontWeight = 'bold';
                        mark.style.transform = 'translate(-75%, -10%)';
                        mark.style.position = 'absolute';
                        cell.appendChild(mark);
                    }
                } else {
                    // Add class for future dates
                    cell.classList.add('future');
                }

                // Append the cell to the current row
                row.appendChild(cell);
            }
        }

        // Function to get the name of the month
        function getMonthName(month) {
            const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            return months[month - 1];
        }

        // Call the function to populate the calendar when the page loads
        populateCalendar();

        // Function to populate the admin calendar with fetched time records
        async function populateAdminCalendar() {
            // Get the current year and month
            const currentDate = new Date();
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth() + 1;

            // Get the admin calendar body element
            const adminCalendarBody = document.getElementById('calendar-body2');

            // Get the month and year element
            const monthYearElement = document.getElementById('month-year');
            monthYearElement.textContent = `${getMonthName(month)} ${year}`;

            // Get the number of days in the current month
            const daysInMonth = new Date(year, month, 0).getDate();

            // Clear existing content
            adminCalendarBody.innerHTML = '';

            // Start building the table rows
            let row;
            for (let day = 1; day <= daysInMonth; day++) {
                if (day === 1 || new Date(year, month - 1, day).getDay() === 1) {
                    // Start a new row at the beginning of the month or on Monday
                    row = document.createElement('tr');
                    adminCalendarBody.appendChild(row);
                }

                // Create a table cell for the day
                const cell = document.createElement('td');
                cell.textContent = day;

                // Append the cell to the current row
                row.appendChild(cell);
            }
        }

        // Call the function to populate the admin calendar when the page loads
        populateAdminCalendar();


        function updateCPULoad() {
            var randomLoad = (Math.random() * 50 + 50).toFixed(2);

            // Update CPU load text and progress bar
            document.getElementById('cpuLoad').textContent = randomLoad + '%';
            document.getElementById('cpuLoadBar').style.width = randomLoad + '%';
        }

        // Initial call to update CPU load
        updateCPULoad();

        // Update CPU load every 3 seconds (3000 milliseconds)
        setInterval(updateCPULoad, 3000);

        function updateDateTime() {
            var currentDate = new Date();
            var options = { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true };
            var formattedDateTime = currentDate.toLocaleString('en-US', options);

            document.getElementById('currentDateTime').innerText = formattedDateTime;
        }

        // Initial call to display the date and time
        updateDateTime();

        // Set up an interval to update the date and time every second
        setInterval(updateDateTime, 1000);

        // Variable to store the interval ID for the check-in duration timer
        let checkinDurationTimer;

        // Function to update the check-in duration UI
        function updateCheckinDurationUI() {
            const storedStartTime = localStorage.getItem('checkinStartTime');
            const isTimerRunning = localStorage.getItem('isTimerRunning') === 'true';
            const durationElement = document.getElementById('checkinDuration');
            const recordingTabElement = document.getElementById('recordingTab');
            if (storedStartTime && isTimerRunning) {
                const startTime = new Date(storedStartTime);
                const currentTime = new Date();
                const duration = currentTime - startTime;
                const hours = Math.floor(duration / (60 * 60 * 1000)).toString().padStart(2, '0');
                const minutes = Math.floor((duration % (60 * 60 * 1000)) / (60 * 1000)).toString().padStart(2, '0');
                const seconds = Math.floor((duration % (60 * 1000)) / 1000).toString().padStart(2, '0');
                durationElement.innerText = 'Recording Duration: ' + hours + ':' + minutes + ':' + seconds;
                durationElement.style.display = 'block'; // Show the duration
                recordingTabElement.style.display = 'flex';
                checkinDurationTimer = setInterval(updateCheckinDurationUI, 1000);
            } else {
                durationElement.style.display = 'none'; // Hide the duration
                recordingTabElement.style.display = 'none';
                // Clear the interval if timer is not running
                clearInterval(checkinDurationTimer);
            }
        }

        // Function to start the check-in duration timer
        function startCheckinDurationTimer() {
            // Update the check-in duration every second
            checkinDurationTimer = setInterval(updateCheckinDurationUI, 1000);
            const startTime = new Date();
            localStorage.setItem('checkinStartTime', startTime);
            localStorage.setItem('isTimerRunning', true);
        }

        // Function to resume the check-in duration timer
        function resumeCheckinDurationTimer() {
            const startTime = localStorage.getItem('checkinStartTime');
            localStorage.setItem('checkinStartTime', startTime);
            localStorage.setItem('isTimerRunning', true);
            updateCheckinDurationUI();
        }

        // Function to stop the check-in duration timer
        function stopCheckinDurationTimer() {
            clearInterval(checkinDurationTimer);
            localStorage.removeItem('checkinStartTime');
            // Hide the duration when the timer is stopped
            document.getElementById('checkinDuration').style.display = 'none';
            document.getElementById('recordingTab').style.display = 'none';
        }

        // Event listener for the Check-in button
        const checkinButton = document.querySelector('#checkinButton');
        if (checkinButton) {
            checkinButton.addEventListener('click', function () {
                // Start the check-in duration timer when the user checks in
                startCheckinDurationTimer();
            });
        }

        // Event listener for the Check-out button
        const checkoutButton = document.querySelector('#checkoutButton');
        if (checkoutButton) {
            checkoutButton.addEventListener('click', function () {
                // Stop the check-in duration timer when the user checks out
                stopCheckinDurationTimer();

                // Send the recorded duration to the server
                fetch('/checkout', {
                    method: 'POST'
                })
                    .then(response => {
                        // Handle response from the server
                        if (response.ok) {
                            // Success
                            console.log('Duration recorded successfully.');
                            // Update the recorded duration from the server
                            fetch('/get_recorded_duration')
                                .then(response => response.json())
                                .then(data => {
                                    if (data.recorded_duration) {
                                        // If recorded duration exists, update the UI
                                        const recordedDuration = data.recorded_duration;
                                        document.getElementById('recordedDuration').innerText = 'Recorded Duration: ' + recordedDuration;
                                    } else {
                                        // If recorded duration does not exist, reset the UI
                                        document.getElementById('recordedDuration').innerText = 'Duration: --:--:--';
                                    }
                                })
                                .catch(error => console.error('Error fetching recorded duration:', error));
                        } else {
                            // Error
                            console.error('Failed to record duration.');
                        }
                    })
                    .catch(error => {
                        console.error('Error recording duration:', error);
                    });
            });
        }

        // Fetch and update the check-in duration UI when the page loads
        updateCheckinDurationUI();
    });
</script>